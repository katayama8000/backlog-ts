name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        deno-version: [2.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: ${{ matrix.deno-version }}

      - name: Verify Deno installation
        run: deno --version

      - name: Cache Deno dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/deno
            ~/.deno
          key: ${{ runner.os }}-deno-${{ hashFiles('deno.json', 'deno.lock') }}
          restore-keys: |
            ${{ runner.os }}-deno-

      - name: Run linter
        run: deno task lint

      - name: Run formatter check
        run: deno fmt --check

      - name: Run type check
        run: deno task check

      - name: Run tests
        run: deno task test

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.x

      - name: Run integration tests
        env:
          BACKLOG_HOST: ${{ secrets.BACKLOG_HOST }}
          BACKLOG_API_KEY: ${{ secrets.BACKLOG_API_KEY }}
        run: |
          if [ -n "$BACKLOG_HOST" ] && [ -n "$BACKLOG_API_KEY" ]; then
            echo "Running integration tests with real API..."
            deno task test:integration
          else
            echo "Skipping integration tests (no credentials configured)"
          fi

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: 2.x

      - name: Generate coverage
        run: deno test --allow-net --coverage=coverage tests/client_test.ts tests/params_test.ts tests/request_test.ts tests/space_test.ts

      - name: Generate coverage report
        run: deno coverage coverage --lcov --output=coverage.lcov

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.lcov
          fail_ci_if_error: false
